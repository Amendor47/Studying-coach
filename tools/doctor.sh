#!/bin/bash
# doctor.sh - Syst√®me de diagnostic pour Study Coach
# V√©rifie les d√©pendances, ports, services et sant√© g√©n√©rale

set -e

echo "ü©∫ STUDY COACH - DIAGNOSTIC SYST√àME"
echo "=================================="

# Variables de configuration
PORT=${PORT:-5000}
PYTHON_CMD=${PYTHON_CMD:-python}
VENV_PATH=${VENV_PATH:-venv}

# Codes de retour
GLOBAL_STATUS=0
WARNINGS=0
ERRORS=0

# Fonctions utilitaires
log_info() { echo "‚ÑπÔ∏è  $1"; }
log_warn() { echo "‚ö†Ô∏è  $1"; WARNINGS=$((WARNINGS + 1)); }
log_error() { echo "‚ùå $1"; ERRORS=$((ERRORS + 1)); GLOBAL_STATUS=1; }
log_ok() { echo "‚úÖ $1"; }

# 1. V√©rifier Python et environnement
echo -e "\nüìç ENVIRONNEMENT PYTHON"
if command -v $PYTHON_CMD >/dev/null 2>&1; then
    PYTHON_VERSION=$($PYTHON_CMD --version 2>&1)
    log_ok "Python trouv√©: $PYTHON_VERSION"
else
    log_error "Python non trouv√© avec la commande: $PYTHON_CMD"
fi

# V√©rifier l'environnement virtuel (optionnel)
if [ -d "$VENV_PATH" ]; then
    log_info "Environnement virtuel d√©tect√©: $VENV_PATH"
else
    log_warn "Aucun environnement virtuel dans $VENV_PATH"
fi

# 2. V√©rifier les d√©pendances Python critiques
echo -e "\nüìç D√âPENDANCES PYTHON"
check_package() {
    local pkg_name="$1"
    local import_name="$2"
    if $PYTHON_CMD -c "import $import_name" 2>/dev/null; then
        log_ok "Package disponible: $pkg_name"
    else
        log_error "Package manquant: $pkg_name"
    fi
}

check_package "flask" "flask"
check_package "flask-cors" "flask_cors"
check_package "python-dotenv" "dotenv"
check_package "requests" "requests"
check_package "beautifulsoup4" "bs4"

# 3. V√©rifier port 5000
echo -e "\nüìç PORTS ET SERVICES"
if command -v lsof >/dev/null 2>&1; then
    LSOF_OUTPUT=$(lsof -ti:$PORT 2>/dev/null || true)
    if [ -n "$LSOF_OUTPUT" ]; then
        log_warn "Port $PORT occup√© (PID: $LSOF_OUTPUT). Actions sugg√©r√©es: kill $LSOF_OUTPUT"
    else
        log_ok "Port $PORT disponible"
    fi
else
    log_warn "lsof non disponible - impossible de v√©rifier le port $PORT"
fi

# 4. V√©rifier Ollama (optionnel)
echo -e "\nüìç OLLAMA (LLM LOCAL)"
if command -v ollama >/dev/null 2>&1; then
    OLLAMA_VERSION=$(ollama --version 2>&1 | head -n1 || echo "version inconnue")
    log_ok "Ollama install√©: $OLLAMA_VERSION"
    
    # V√©rifier les mod√®les critiques
    REQUIRED_MODELS=("llama3:8b" "nomic-embed-text")
    for model in "${REQUIRED_MODELS[@]}"; do
        if ollama list 2>/dev/null | grep -q "$model"; then
            log_ok "Mod√®le disponible: $model"
        else
            log_warn "Mod√®le manquant: $model. Action sugg√©r√©e: ollama pull $model"
        fi
    done
else
    log_warn "Ollama non install√© - fonctionnalit√©s IA limit√©es"
    log_info "Installation: https://ollama.ai/download"
fi

# 5. Test de sant√© du backend (si disponible)
echo -e "\nüìç SANT√â BACKEND"
BASE_URL="http://127.0.0.1:$PORT"

# Test /api/health
if curl -s --connect-timeout 3 "$BASE_URL/api/health" >/dev/null 2>&1; then
    log_ok "Endpoint /api/health accessible"
else
    log_warn "Backend non d√©marr√© ou endpoint /api/health inaccessible"
    log_info "D√©marrer avec: python app.py ou ./start.sh"
fi

# Test /api/health/llm  
if curl -s --connect-timeout 3 "$BASE_URL/api/health/llm" >/dev/null 2>&1; then
    log_ok "Endpoint /api/health/llm accessible"
else
    log_warn "LLM endpoint non accessible - v√©rifier Ollama"
fi

# 6. V√©rifications des fichiers critiques
echo -e "\nüìç FICHIERS SYST√àME"
CRITICAL_FILES=("app.py" "templates/index.html" "static/app.js")

for file in "${CRITICAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        log_ok "Fichier trouv√©: $file"
    else
        log_error "Fichier manquant: $file"
    fi
done

# R√©sum√© final
echo -e "\nüìã R√âSUM√â DIAGNOSTIC"
echo "=================="
if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    log_ok "Syst√®me enti√®rement op√©rationnel"
elif [ $ERRORS -eq 0 ]; then
    log_warn "Syst√®me op√©rationnel avec $WARNINGS avertissement(s)"
else
    log_error "Syst√®me avec $ERRORS erreur(s) critique(s) et $WARNINGS avertissement(s)"
fi

echo -e "\nüöÄ ACTIONS RECOMMAND√âES:"
if [ $ERRORS -gt 0 ]; then
    echo "  1. Installer les packages Python manquants: pip install -r requirements.txt"
    echo "  2. V√©rifier les fichiers critiques manquants"
fi
if [ $WARNINGS -gt 0 ]; then
    echo "  3. Installer Ollama pour les fonctionnalit√©s IA: https://ollama.ai"
    echo "  4. T√©l√©charger les mod√®les: ollama pull llama3:8b && ollama pull nomic-embed-text"
    echo "  5. Lib√©rer les ports occup√©s si n√©cessaire"
fi

echo -e "\nCode de retour: $GLOBAL_STATUS"
exit $GLOBAL_STATUS